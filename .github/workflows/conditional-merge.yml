name: Auto Merge

on:
  pull_request:
    branches:
      - master
      - release/*
    types:
      - opened
      - reopened
      - labeled
      - synchronize
  pull_request_review:
    types:
      - submitted
  issue_comment:
    types:
      - created

jobs:
  check:
    uses: ./.github/workflows/check.yml

  lint:
    uses: ./.github/workflows/lint.yml

  merge:
    name: Auto Merge
    needs: [ check, lint ]
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check PR Details
        id: check_pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              console.log('No pull request associated with this workflow. Exiting.');
              return;
            }
            
            const eventName = context.eventName;
            // Check if special comment has been added
            if (eventName === 'issue_comment') {
              const comment = context.payload.comment.body;
              const pr = context.payload.issue;

              if (!pr.pull_request) {
                console.log('This is not a pull request. Exiting.');
                return;
              }

              if (comment.trim() !== 'recheck') {
                console.log(`Ignoring comment: "${comment}". Exiting.`);
                return;
              }
              console.log('Triggered by comment: recheck');
            }
            
            // check if special "merge" label has been set
            const hasMergeLabel = pr.labels.some(label => label.name === 'merge');
            if (!hasMergeLabel) {
              console.log('No "merge" label found. Exiting.');
              return;
            }

            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const isAuthorOwner = pr.user.login === context.repo.owner;
            const hasApprovedReview = reviews.some(review => review.state === 'APPROVED');

            if (!hasApprovedReview && !isAuthorOwner) {
              console.log('Conditions not met for auto-merge. Exiting.');
              return;
            }

            const requiredChecks = ['Auto Merge / check / Build and Test', 'Auto Merge / lint / Code Style'];

            const statusChecks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            console.log(statusChecks.data.check_runs.map(check => check.name));

            const allChecksPassed = statusChecks.data.check_runs
              .filter(check => requiredChecks.includes(check.name))
              .every(check => check.conclusion === 'success');

            if (!allChecksPassed) {
              console.log('Not all required status checks passed. Exiting.');
              return;
            }

            core.setOutput('ready_to_merge', 'true');

      - name: Auto Merge PR
        if: steps.check_pr.outputs.ready_to_merge == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              merge_method: 'squash'
            });
